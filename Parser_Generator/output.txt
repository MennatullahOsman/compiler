The predictive parsing table : 

Non terminal : ASSIGNMENT --> 
If $ then synch , If float then synch , If id then id = EXPRESSION ; , If if then synch , If int then synch , If while then synch , If } then synch , 
----------------------------
Non terminal : DECLARATION --> 
If $ then synch , If float then PRIMITIVE_TYPE id ; , If id then synch , If if then synch , If int then PRIMITIVE_TYPE id ; , If while then synch , If } then synch , 
----------------------------
Non terminal : EXPRESSION --> 
If ( then SIMPLE_EXPRESSION EXPRESSION` , If ) then synch , If + then SIMPLE_EXPRESSION EXPRESSION` , If - then SIMPLE_EXPRESSION EXPRESSION` , If ; then synch , If id then SIMPLE_EXPRESSION EXPRESSION` , If num then SIMPLE_EXPRESSION EXPRESSION` , 
----------------------------
Non terminal : EXPRESSION` --> 
If ) then ^ , If ; then ^ , If relop then relop SIMPLE_EXPRESSION , 
----------------------------
Non terminal : FACTOR --> 
If ( then ( EXPRESSION ) , If ) then synch , If ; then synch , If addop then synch , If id then id , If mulop then synch , If num then num , If relop then synch , 
----------------------------
Non terminal : IF --> 
If $ then synch , If float then synch , If id then synch , If if then if ( EXPRESSION ) { STATEMENT } else { STATEMENT } , If int then synch , If while then synch , If } then synch , 
----------------------------
Non terminal : METHOD_BODY --> 
If $ then synch , If float then STATEMENT_LIST , If id then STATEMENT_LIST , If if then STATEMENT_LIST , If int then STATEMENT_LIST , If while then STATEMENT_LIST , 
----------------------------
Non terminal : PRIMITIVE_TYPE --> 
If float then float , If id then synch , If int then int , 
----------------------------
Non terminal : SIGN --> 
If ( then synch , If + then + , If - then - , If id then synch , If num then synch , 
----------------------------
Non terminal : SIMPLE_EXPRESSION --> 
If ( then TERM SIMPLE_EXPRESSION'' , If ) then synch , If + then SIGN TERM SIMPLE_EXPRESSION'' , If - then SIGN TERM SIMPLE_EXPRESSION'' , If ; then synch , If id then TERM SIMPLE_EXPRESSION'' , If num then TERM SIMPLE_EXPRESSION'' , If relop then synch , 
----------------------------
Non terminal : SIMPLE_EXPRESSION'' --> 
If ) then ^ , If ; then ^ , If addop then addop TERM SIMPLE_EXPRESSION'' , If relop then ^ , 
----------------------------
Non terminal : STATEMENT --> 
If $ then synch , If float then DECLARATION , If id then ASSIGNMENT , If if then IF , If int then DECLARATION , If while then WHILE , If } then synch , 
----------------------------
Non terminal : STATEMENT_LIST --> 
If $ then synch , If float then STATEMENT STATEMENT_LIST'' , If id then STATEMENT STATEMENT_LIST'' , If if then STATEMENT STATEMENT_LIST'' , If int then STATEMENT STATEMENT_LIST'' , If while then STATEMENT STATEMENT_LIST'' , 
----------------------------
Non terminal : STATEMENT_LIST'' --> 
If $ then ^ , If float then STATEMENT STATEMENT_LIST'' , If id then STATEMENT STATEMENT_LIST'' , If if then STATEMENT STATEMENT_LIST'' , If int then STATEMENT STATEMENT_LIST'' , If while then STATEMENT STATEMENT_LIST'' , 
----------------------------
Non terminal : TERM --> 
If ( then FACTOR TERM'' , If ) then synch , If ; then synch , If addop then synch , If id then FACTOR TERM'' , If num then FACTOR TERM'' , If relop then synch , 
----------------------------
Non terminal : TERM'' --> 
If ) then ^ , If ; then ^ , If addop then ^ , If mulop then mulop FACTOR TERM'' , If relop then ^ , 
----------------------------
Non terminal : WHILE --> 
If $ then synch , If float then synch , If id then synch , If if then synch , If int then synch , If while then while ( EXPRESSION ) { STATEMENT } , If } then synch , 
----------------------------
METHOD_BODY --> STATEMENT_LIST 
STATEMENT_LIST --> STATEMENT_LIST'' STATEMENT 
STATEMENT --> DECLARATION 
DECLARATION --> ; id PRIMITIVE_TYPE 
PRIMITIVE_TYPE --> int 
accept int
accept id
accept ;
STATEMENT_LIST'' --> STATEMENT_LIST'' STATEMENT 
STATEMENT --> ASSIGNMENT 
ASSIGNMENT --> ; EXPRESSION = id 
accept id
accept =
EXPRESSION --> EXPRESSION` SIMPLE_EXPRESSION 
SIMPLE_EXPRESSION --> SIMPLE_EXPRESSION'' TERM 
TERM --> TERM'' FACTOR 
FACTOR --> num 
accept num
TERM'' --> ^ 
SIMPLE_EXPRESSION'' --> ^ 
EXPRESSION` --> ^ 
accept ;
STATEMENT_LIST'' --> STATEMENT_LIST'' STATEMENT 
STATEMENT --> IF 
IF --> } STATEMENT { else } STATEMENT { ) EXPRESSION ( if 
accept if
accept (
EXPRESSION --> EXPRESSION` SIMPLE_EXPRESSION 
SIMPLE_EXPRESSION --> SIMPLE_EXPRESSION'' TERM 
TERM --> TERM'' FACTOR 
FACTOR --> id 
accept id
TERM'' --> ^ 
SIMPLE_EXPRESSION'' --> ^ 
EXPRESSION` --> SIMPLE_EXPRESSION relop 
accept relop
SIMPLE_EXPRESSION --> SIMPLE_EXPRESSION'' TERM 
TERM --> TERM'' FACTOR 
FACTOR --> num 
accept num
TERM'' --> ^ 
SIMPLE_EXPRESSION'' --> ^ 
accept )
accept {
STATEMENT --> ASSIGNMENT 
ASSIGNMENT --> ; EXPRESSION = id 
accept id
accept =
EXPRESSION --> EXPRESSION` SIMPLE_EXPRESSION 
SIMPLE_EXPRESSION --> SIMPLE_EXPRESSION'' TERM 
TERM --> TERM'' FACTOR 
FACTOR --> num 
accept num
TERM'' --> ^ 
SIMPLE_EXPRESSION'' --> ^ 
EXPRESSION` --> ^ 
accept ;
accept }
else missing 
{ missing 
} missing 
The predictive parsing table : 

Non terminal : ASSIGNMENT --> 
If $ then synch , If float then synch , If id then id = EXPRESSION ; , If if then synch , If int then synch , If while then synch , If } then synch , 
----------------------------
Non terminal : DECLARATION --> 
If $ then synch , If float then PRIMITIVE_TYPE id ; , If id then synch , If if then synch , If int then PRIMITIVE_TYPE id ; , If while then synch , If } then synch , 
----------------------------
Non terminal : EXPRESSION --> 
If ( then SIMPLE_EXPRESSION EXPRESSION` , If ) then synch , If + then SIMPLE_EXPRESSION EXPRESSION` , If - then SIMPLE_EXPRESSION EXPRESSION` , If ; then synch , If id then SIMPLE_EXPRESSION EXPRESSION` , If num then SIMPLE_EXPRESSION EXPRESSION` , 
----------------------------
Non terminal : EXPRESSION` --> 
If ) then ^ , If ; then ^ , If relop then relop SIMPLE_EXPRESSION , 
----------------------------
Non terminal : FACTOR --> 
If ( then ( EXPRESSION ) , If ) then synch , If ; then synch , If addop then synch , If id then id , If mulop then synch , If num then num , If relop then synch , 
----------------------------
Non terminal : IF --> 
If $ then synch , If float then synch , If id then synch , If if then if ( EXPRESSION ) { STATEMENT } else { STATEMENT } , If int then synch , If while then synch , If } then synch , 
----------------------------
Non terminal : METHOD_BODY --> 
If $ then synch , If float then STATEMENT_LIST , If id then STATEMENT_LIST , If if then STATEMENT_LIST , If int then STATEMENT_LIST , If while then STATEMENT_LIST , 
----------------------------
Non terminal : PRIMITIVE_TYPE --> 
If float then float , If id then synch , If int then int , 
----------------------------
Non terminal : SIGN --> 
If ( then synch , If + then + , If - then - , If id then synch , If num then synch , 
----------------------------
Non terminal : SIMPLE_EXPRESSION --> 
If ( then TERM SIMPLE_EXPRESSION'' , If ) then synch , If + then SIGN TERM SIMPLE_EXPRESSION'' , If - then SIGN TERM SIMPLE_EXPRESSION'' , If ; then synch , If id then TERM SIMPLE_EXPRESSION'' , If num then TERM SIMPLE_EXPRESSION'' , If relop then synch , 
----------------------------
Non terminal : SIMPLE_EXPRESSION'' --> 
If ) then ^ , If ; then ^ , If addop then addop TERM SIMPLE_EXPRESSION'' , If relop then ^ , 
----------------------------
Non terminal : STATEMENT --> 
If $ then synch , If float then DECLARATION , If id then ASSIGNMENT , If if then IF , If int then DECLARATION , If while then WHILE , If } then synch , 
----------------------------
Non terminal : STATEMENT_LIST --> 
If $ then synch , If float then STATEMENT STATEMENT_LIST'' , If id then STATEMENT STATEMENT_LIST'' , If if then STATEMENT STATEMENT_LIST'' , If int then STATEMENT STATEMENT_LIST'' , If while then STATEMENT STATEMENT_LIST'' , 
----------------------------
Non terminal : STATEMENT_LIST'' --> 
If $ then ^ , If float then STATEMENT STATEMENT_LIST'' , If id then STATEMENT STATEMENT_LIST'' , If if then STATEMENT STATEMENT_LIST'' , If int then STATEMENT STATEMENT_LIST'' , If while then STATEMENT STATEMENT_LIST'' , 
----------------------------
Non terminal : TERM --> 
If ( then FACTOR TERM'' , If ) then synch , If ; then synch , If addop then synch , If id then FACTOR TERM'' , If num then FACTOR TERM'' , If relop then synch , 
----------------------------
Non terminal : TERM'' --> 
If ) then ^ , If ; then ^ , If addop then ^ , If mulop then mulop FACTOR TERM'' , If relop then ^ , 
----------------------------
Non terminal : WHILE --> 
If $ then synch , If float then synch , If id then synch , If if then synch , If int then synch , If while then while ( EXPRESSION ) { STATEMENT } , If } then synch , 
----------------------------
METHOD_BODY --> STATEMENT_LIST 
STATEMENT_LIST --> STATEMENT_LIST'' STATEMENT 
STATEMENT --> DECLARATION 
DECLARATION --> ; id PRIMITIVE_TYPE 
PRIMITIVE_TYPE --> int 
accept int
accept id
accept ;
STATEMENT_LIST'' --> STATEMENT_LIST'' STATEMENT 
STATEMENT --> ASSIGNMENT 
ASSIGNMENT --> ; EXPRESSION = id 
accept id
accept =
EXPRESSION --> EXPRESSION` SIMPLE_EXPRESSION 
SIMPLE_EXPRESSION --> SIMPLE_EXPRESSION'' TERM 
TERM --> TERM'' FACTOR 
FACTOR --> num 
accept num
TERM'' --> ^ 
SIMPLE_EXPRESSION'' --> ^ 
EXPRESSION` --> ^ 
accept ;
STATEMENT_LIST'' --> STATEMENT_LIST'' STATEMENT 
STATEMENT --> IF 
IF --> } STATEMENT { else } STATEMENT { ) EXPRESSION ( if 
accept if
accept (
EXPRESSION --> EXPRESSION` SIMPLE_EXPRESSION 
SIMPLE_EXPRESSION --> SIMPLE_EXPRESSION'' TERM 
TERM --> TERM'' FACTOR 
FACTOR --> id 
accept id
TERM'' --> ^ 
SIMPLE_EXPRESSION'' --> ^ 
EXPRESSION` --> SIMPLE_EXPRESSION relop 
accept relop
SIMPLE_EXPRESSION --> SIMPLE_EXPRESSION'' TERM 
TERM --> TERM'' FACTOR 
FACTOR --> num 
accept num
TERM'' --> ^ 
SIMPLE_EXPRESSION'' --> ^ 
accept )
accept {
STATEMENT --> ASSIGNMENT 
ASSIGNMENT --> ; EXPRESSION = id 
accept id
accept =
EXPRESSION --> EXPRESSION` SIMPLE_EXPRESSION 
SIMPLE_EXPRESSION --> SIMPLE_EXPRESSION'' TERM 
TERM --> TERM'' FACTOR 
FACTOR --> num 
accept num
TERM'' --> ^ 
SIMPLE_EXPRESSION'' --> ^ 
EXPRESSION` --> ^ 
accept ;
accept }
else missing 
{ missing 
} missing 
